#include "uart.h"

//**************************************串口
/*----------------------------
串口初始化 波特率9600
-----------------------------*/
void Uart_Init(void)		//9600bps@11.05926MHz
{
	PCON &= 0x7F;
	SCON = 0x50;
	TMOD &= 0x0F;
	TMOD |= 0x20;
	TL1 = 0xFD;
	TH1 = 0xFD;
	ET1 = 0;
	TR1 = 1;
	ES  = 1;
}
/*----------------------------
UART1 发送串口数据
-----------------------------*/
void Uart_SendData(uchar dat)
{
	ES=0;			//关串口中断
	SBUF=dat;			
	while(TI!=1);	//等待发送成功
	TI=0;			//清除发送中断标志
	ES=1;			//开串口中断
}
/*----------------------------
UART1 发送字符串
-----------------------------*/
void Uart_SendString(char *s)
{
	while(*s)//检测字符串结束符
	{
		Uart_SendData(*s++);//发送当前字符
	}
}

unsigned short Uart_SendBuffer(const uchar* buffer, unsigned short length)
{
	int i;
	if( (buffer==0) || (length==0) )
	{
		return 0;
	}
	for(i=0; i<length; i++)
	{
		Uart_SendData(*buffer++);
	}
	return length;
}


unsigned short Uart_Con = 0;
char Uart_Buf[BUF_SIZE] = {0};

/********************* UART中断函数************************/
void Uart_ISR (void) interrupt 4
{
	if(RI)
	{
		RI = 0;
//		LED3 = !LED3;
		
		// 每接收到一个数据,都会重新给定时器赋初值,定时器向上计数,直到溢出中断50ms
		// 也就是说收到最后一个数据50ms之后没有收到新的数据,则认为该次接收已经完成.
		TL0 = 0x00;		//设置定时初值
		TH0 = 0x4C;		//设置定时初值
		TR0 = 1;		//开始计时
		
		Uart_Buf[Uart_Con] = SBUF;
		Uart_Con++;
		if(Uart_Con > BUF_SIZE)
		{
			Uart_Con = 0;
		}
	}
	if (TI)
	{
		TI = 0;                          //清除TI位
	}
}
